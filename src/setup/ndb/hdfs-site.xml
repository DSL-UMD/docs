<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. See accompanying LICENSE file.
-->

<!-- Put site-specific property overrides in this file. -->

<configuration>

  <property>
    <name>dfs.replication</name>
    <value>1</value>
    <description>Default block replication.
    The actual number of replications can be specified when the file is created.
    The default is used if replication is not specified in create time.
    </description>
  </property>

  <property>
    <name>dfs.namenode.rpc-bind-host</name>
    <value>0.0.0.0</value>
    <description>
      The actual address the RPC server will bind to. If this optional address is
      set, it overrides only the hostname portion of dfs.namenode.rpc-address.
      It can also be specified per name node or name service for HA/Federation.
      This is useful for making the name node listen on all interfaces by
      setting it to 0.0.0.0.
    </description>
  </property>

  <property>
    <name>dfs.namenode.servicerpc-bind-host</name>
    <value>0.0.0.0</value>
    <description>
      The actual address the service RPC server will bind to. If this optional address is
      set, it overrides only the hostname portion of dfs.namenode.servicerpc-address.
      It can also be specified per name node or name service for HA/Federation.
      This is useful for making the name node listen on all interfaces by
      setting it to 0.0.0.0.
    </description>
  </property>

  <property>
    <name>dfs.namenode.http-bind-host</name>
    <value>0.0.0.0</value>
    <description>
      The actual adress the HTTP server will bind to. If this optional address
      is set, it overrides only the hostname portion of dfs.namenode.http-address.
      It can also be specified per name node or name service for HA/Federation.
      This is useful for making the name node HTTP server listen on all
      interfaces by setting it to 0.0.0.0.
    </description>
  </property>

  <property>
    <name>dfs.namenode.https-bind-host</name>
    <value>0.0.0.0</value>
    <description>
      The actual adress the HTTPS server will bind to. If this optional address
      is set, it overrides only the hostname portion of dfs.namenode.https-address.
      It can also be specified per name node or name service for HA/Federation.
      This is useful for making the name node HTTPS server listen on all
      interfaces by setting it to 0.0.0.0.
    </description>
  </property>

  <property>
    <name>dfs.namenode.rpc-address</name>
    <value>ip-172-31-41-79.ec2.internal:8020</value>
    <description>
      RPC address that handles all clients requests. In the case of HA/Federation where multiple namenodes exist,
      the name service id is added to the name e.g. dfs.namenode.rpc-address.ns1
      dfs.namenode.rpc-address.EXAMPLENAMESERVICE
      The value of this property will take the form of hdfs://nn-host1:rpc-port.
    </description>
  </property>

  <property>
    <name>dfs.namenode.http-address</name>
    <value>ip-172-31-41-79.ec2.internal:50070</value>
    <description>The address and the base port where the dfs namenode web ui will listen on. </description>
  </property>

  <property>
    <name>dfs.client.max.retries.on.failure</name>
    <value>1</value>
  </property>

  <property>
    <name>dfs.client.block.write.locateFollowingBlock.retries</name>
    <value>10</value>
  </property>

  <!-- Do not modify this file directly.  Instead, copy entries that you -->
  <!-- wish to modify from this file into hdfs-site.xml and change them -->
  <!-- there.  If hdfs-site.xml does not already exist, create it.      -->

  <!-- <property> -->
  <!--   <name>hadoop.hdfs.configuration.version</name> -->
  <!--   <value>1</value> -->
  <!--   <description>version of this configuration file</description> -->
  <!-- </property> -->

  <property>
    <name>dfs.namenode.accesstime.precision</name>
    <value>3600000</value>
    <description>The access time for HDFS file is precise upto this value.
    The default value is 1 hour. Setting a value of 0 disables
    access times for HDFS.
    </description>
  </property>


  <property>
    <name>dfs.namenode.handler.count</name>
    <value>120</value>
    <description>The RPC server that listens to requests from clients</description>
  </property>

  <!-- <property> -->
  <!--    <name>dfs.namenode.service.handler.count</name> -->
  <!--   <value>10</value> -->
  <!--   <description>The RPC server threads that listens to requests from DataNodes</description> -->
  <!-- </property> -->

  <!-- <property> -->
  <!--   <name>dfs.datanode.data.dir</name> -->
  <!--   <value>file://file:///srv/hops/hopsdata/hdfs/dn/disk</value> -->
  <!--   <description>Determines where on the local filesystem an DFS data node should store its blocks.  If this is a comma-delimited -->
  <!--   list of directories, then data will be storned in all named  directories, typically on different devices. Directories that do not exist are ignored. -->
  <!--   </description> -->
  <!-- </property> -->

  <property>
    <name>dfs.namenode.inodeid.batchsize</name>
    <value>10000</value>
    <description></description>
  </property>

  <property>
    <name>dfs.namenode.blockid.batchsize</name>
    <value>10000</value>
    <description></description>
  </property>

  <property>
    <name>dfs.blocksize</name>
    <value>134217728</value>
    <description>
        The default block size for new files, in bytes.
        You can use the following suffix (case insensitive):
        k(kilo), m(mega), g(giga), t(tera), p(peta), e(exa) to specify the size (such as 128k, 512m, 1g, etc.),
        Or provide complete size in bytes (such as 134217728 for 128 MB).
    </description>
  </property>

  <property>
    <name>dfs.client.refresh.namenode.list</name>
    <value>60000</value>
    <description>Time in ms</description>
  </property>


  <property>
    <name>dfs.namenode.name.dir</name>
    <value>file:///srv/hops/hopsdata/hdfs/nn</value>
  </property>

  <property>
    <name>dfs.datanode.data.dir</name>
    <value>file:///srv/hops/hopsdata/hdfs/dn/disk</value>
  </property>

  <property>
    <name>dfs.datanode.data.dir.perm</name>
    <value>700</value>
  </property>

  <property>
    <name>dfs.namenode.safemode.extension</name>
    <value>30000</value>
    <description>
      Determines extension of safe mode in milliseconds
      after the threshold level is reached.
    </description>
  </property>

  <property>
    <name>dfs.namenode.processReport.batchsize</name>
    <value>10</value>
    <description>This is the number of blocks to be processed in one transaction.
    Higher values can result in higher throughput, but too high values can cause transactions to fail.
    </description>
  </property>

  <property>
    <name>dfs.namenode.misreplicated.batchsize</name>
    <value>500</value>
    <description>

    </description>
  </property>

  <property>
    <name>dfs.namenode.misreplicated.noofbatches</name>
    <value>20</value>
    <description>
    </description>
  </property>

  <!-- <property> -->
  <!--   <name>dfs.namenode.logging.level</name> -->
  <!--   <value>DEBUG</value> -->
  <!--   <description> -->
  <!--     The logging level for dfs namenode. Other values are "dir" (trace -->
  <!--     namespace mutations), "block" (trace block under/over replications -->
  <!--     and block creations/deletions), or "all". -->
  <!--   </description> -->
  <!-- </property> -->


  <property>
    <name>dfs.namenode.selector-policy</name>
    <value>RANDOM_STICKY</value>
    <description>Used by clients. Possible values ROUND_ROBIN, RANDOM, RANDOM_STICKY</description>
  </property>


  <property>
    <name>dfs.resolvingcache.memcache.connectionpool.size</name>
    <value>10</value>
    <description>should be same size as rpc threaads</description>
  </property>

  <property>
    <name>dfs.resolvingcache.enabled</name>
    <value>true</value>
    <description></description>
  </property>

  <property>
    <name>dfs.resolvingcache.type</name>
    <value>InMemory</value>
    <description></description>
  </property>

  <property>
    <name>dfs.resolvingcache.inmemory.maxsize</name>
    <value>2000000</value>
    <description></description>
  </property>

  <property>
    <name>dfs.ndb.setpartitionkey.enabled</name>
    <value>true</value>
    <description></description>
  </property>

  <property>
    <name>dfs.ndb.setrandompartitionkey.enabled</name>
    <value>true</value>
    <description></description>
  </property>

  <property>
    <name>dfs.namenode.quota.enabled</name>
    <value>true</value>
    <description></description>
  </property>

  <property>
    <name>dfs.permissions.enabled</name>
    <value>true</value>
    <description></description>
  </property>

  <property>
    <name>fs.permissions.umask-mode</name>
    <value>0027</value>
    <description></description>
  </property>


  <property>
    <name>dfs.ndc.enable</name>
    <value>false</value>
    <description></description>
  </property>

  <property>
    <name>dfs.transaction.stats.enabled</name>
    <value>false</value>
    <description></description>
  </property>

  <property>
    <name>dfs.transaction.stats.detailed.enabled</name>
    <value>false</value>
    <description></description>
  </property>

  <property>
    <name>dfs.transaction.stats.writerround</name>
    <value>30</value>
    <description></description>
  </property>

  <property>
    <name>dfs.transaction.stats.dir</name>
    <value>/tmp/hopsstats</value>
    <description></description>
  </property>

  <property>
    <name>dfs.heartbeat.interval</name>
    <value>3</value>
    <description></description>
  </property>

  <!-- Enable erasure coding to test all code paths -->

  <property>
    <name>dfs.erasure_coding.enabled</name>
    <value>false</value>
    <description>Enable erasure coding</description>
  </property>

  <property>
     <name>dfs.webhdfs.enabled</name>
     <value>true</value>
  </property>


  <property>
    <name>dfs.permissions.superusergroup</name>
    <value>hdfs</value>
    <description>The group for hdfs superusers</description>
  </property>


<!--
  <property>
    <name>dfs.namenode.datanode.registration.ip-hostname-check</name>
    <value>false</value>
  </property>

  <property>
    <name>dfs.client.read.shortcircuit</name>
    <value>true</value>
  </property>
  <property>
    <name>dfs.domain.socket.path</name>
    <value>/srv/hops/hopsdata/tmp/dn_socket</value>
  </property>

-->

<!-- SSL -->
<!-- Secure webhdfs by requiring TLS two-way authentication, port
     50070 should be firewalled -->

<!-- Store Small Files in NDB-->

<property>
   <name>dfs.store.small.files.in.db</name>
   <value>true</value>
</property>

<property>
   <name>dfs.db.file.max.size</name>
   <value>65536</value>
</property>

<property>
   <name>dfs.db.ondisk.small.file.max.size</name>
   <value>2000</value>
</property>

<property>
   <name>dfs.db.ondisk.medium.file.max.size</name>
   <value>4000</value>
</property>

<property>
   <name>dfs.db.ondisk.large.file.max.size</name>
   <value>65536</value>
</property>

<property>
   <name>dfs.db.inmemory.file.max.size</name>
   <value>1024</value>
</property>

<property>
   <name>dfs.encrypt.data.transfer</name>
   <value>false</value>
</property>

<property>
   <name>dfs.encrypt.data.transfer.algorithm</name>
   <value>3des</value>
</property>

<!-- Block tokens should be enabled when data transfer is encrypted -->
<property>
   <name>dfs.block.access.token.enable</name>
   <value>false</value>
</property>

<property>
   <name>dfs.namenode.enable.retrycache</name>
   <value>true</value>
</property>

<property>
   <name>dfs.locationDomainId</name>
   <value>0</value>
</property>

<property>
  <name>dfs.hosts.exclude</name>
  <value>/srv/hops/hadoop/etc/hadoop/dfs.exclude</value>
</property>

<property>
   <name>dfs.datanode.balance.max.concurrent.moves</name>
   <value>50</value>
</property>

<property>
   <name>dfs.namenode.replication.max-streams</name>
   <value>50</value>
</property>

<property>
   <name>dfs.namenode.replication.max-streams-hard-limit</name>
   <value>100</value>
</property>

<property>
   <name>dfs.namenode.replication.work.multiplier.per.iteration</name>
   <value>2</value>
</property>

<property>
   <name>dfs.enable.cloud.persistence</name>
   <value>false</value>
</property>

<property>
   <name>dfs.cloud.provider</name>
   <value>on-premises</value>
   <description>Cloud provider. Currently only AWS is supported</description>
</property>

<property>
   <name>dfs.cloud.aws.s3.bucket</name>
   <value>hopsfs.bucket</value>
   <description>Hopsfs S3 bucket used to store file system blocks</description>
</property>

<property>
   <name>dfs.cloud.aws.s3.region</name>
   <value>eu-west-1</value>
   <description>AWS Region for file system buckets</description>
</property>

<property>
   <name>dfs.dn.cloud.bypass.cache</name>
   <value>false</value>
   <description></description>
</property>

<property>
   <name>dfs.dn.cloud.max.upload.threads</name>
   <value>20</value>
   <description></description>
</property>

<property>
   <name>dfs.cloud.store.small.files.in.db</name>
   <value>true</value>
   <description></description>
</property>

<property>
   <name>dfs.cloud.concurrent.upload</name>
   <value>true</value>
   <description>Upload file block to s3 using multipart API</description>
</property>

</configuration>
